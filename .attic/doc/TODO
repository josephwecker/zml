===== Immediate / Next Action =====
-- ZML --
  [ ] Special tag module for HTML
    [ ] favicon
    [ ] ZML and ZSS image processing
      [ ] Add height / width if none specified, jiving w/ actual (zml only)
      [ ] Pre-shrink/expand image if h/w is specified & differenct
	  [ ] Spritify
      [ ] Name with hash like JS for url-fingerprinted caching
      [ ] Filesize optimization filter and move to static | OptiPNG or
	  AdvanceCOMP

-- ZSS --

-- ZWAPP --


===== Functional / To Implement =====
-- ZML --
  [ ] Fix space issues for inline tags (honor spaces before, inside, and after)
  [ ] Special tag module for include
  [ ] Special tag module for include_layout
    [ ] Ability to include multiple chunks in different parts / complex layout?
  [ ] Templates compiled for very fast erlang execution
  [~] Updated readme

-- ZSS --
  [ ] Syntax for no-delete
  [ ] Textmate syntax file
  [ ] Readme file for it

-- ZWAPP --
  [ ] Clump views to compile- helping w/ ZSS optimization etc.
  [ ] Develop dependency chart for watching files when clump-compiled
  [ ] Auto reload compilation for development
  [ ] Sample data compilation / autocompile
  [ ] gen_server / batcher / zwapp-minimal
  [ ] Hot code swapping / upgrading mechanisms


===== Polish / Bugs / Future =====
-- ZML --
  [ ] Following doesn't highlight correcly in vim:  ":blah.blah.blah(hey: there)"
  [ ] Say you have a big paragraph of text over multiple lines, and you have lots
      of :strong ...; stuff like that embedded all over, and your text editor
      puts one of those :strong ...; things at the beginning of the line- will
      the compiler choke on the ';'?  It needs to not choke, and needs to, in
      that case, not allow indented children either.
  [ ] Tabs for textmate bundle
  [ ] Parse inline ZSS correctly?
  [ ] Beginning of some evolving ZML coding conventions
  [ ] Unit tests
  [ ] Analyze class attributes and decide to change them to ID's- change CSS
      accordingly.
  [ ] Alphabetize attributes on render
  [ ] Figure out some way to cache results of "closure" because it's sooo
      slowww... (used by html special) (for example, alphabetized md5sums of
      input files corresponding to an output compressed).
  [ ] Replace closure with an erlang based transformation engine so that we
      have some real speed and can even compile on the fly.
  [ ] Warning when tags are in unoptimal order (js then stylesheet, for
      example).
  [ ] HTML special handler
    [ ] Replace regex's with own loop (see TODO tag)
    [ ] Emptiness inside open/close tags for tags that need it, like <script>, when type is html
    [ ] Fix whitespace in front of doctype (on zml.erl side) (done?)
    [ ] Simplified case for loader if inline JS is empty
    [ ] Check environment variable for closure jar before trying the command so that the error is less cryptic.
    [ ] Shorten the library js filename - look in that dir, see what's already there, etc.
    [ ] Auto-fix double-quotes in attribute values
    [ ] At some point validate against type DTD (maybe from zml?)
    [ ] Special "input" handling for html -
      [ ] Normal HTML: <input selected="true">...
      [ ] XHTML:       <input selected="selected">...
      [ ] No selected: <input>...

-- ZSS --
  [ ] Attribute keys with non-numeric starts break syn highlighting (ex:  :*white-space...)
  [ ] "var1 - var2" when var2 doesn't exist gives uninformative error message
  [ ] Keywords in variable names (like "color") throw off syntax highlighting
  [ ] Variable names starting with # and probably others throw off syntax highlighting
  [ ] Boolean expressions / blocks / or ternary expression
  [ ] Right now it cuts color values every time it does an operation- maybe it
      makes more sense to cut them only when they're being rendered finally.
  [ ] Get rgb(), hsl(), rgba()... stuff working
  [ ] VIM syntax - inline comments after attribute text (currently as string highlight)
  [ ] VIM syntax - more realistic highlight links
  [ ] Lazy mixin variable evaluation
  [ ] Beginning of some evolving ZSS coding conventions (loosely based on
      http://www.nodewave.com/download/document/css-coding-style-conventions--standards-guidelines-rules.pdf )
  [ ] Alphabetize key-value pairs on render
  [ ] Remove redundant qualifiers (with notice?)
  [ ] More from here: http://code.google.com/speed/page-speed/docs/rendering.html
  [ ] Automatically figure out which CSS rules are irrelevant and exclude them
	  (flag to disallow this somehow).  (Would need sample html that would be
	  received from servers / generated by JS, etc.)
  [ ] Apply other CSS optimization techniques- safe equivalents that are rendered
	  faster or more broadly.
  [ ] Looks for rules that always override earlier rules (such as a:hover
      details etc.)
  [ ] Warn on unknown css attributes or tags
  [ ] Re-output input colorized with what rules are activated by the ZML
  [ ] Tabs for textmate bundle
  [ ] Real variable vs. string interpolation
  [ ] All expressions evaluating correctly
    [ ] Fix variable vs string
    [ ] string/bool x number
    [ ] string/bool x string
  [ ] A way to preserve order somehow when needed?
  [ ] Include files
    [ ] Search correct paths (project, like zml, script, etc.)
    [ ] Append extension if necessary
    [ ] Syntax highlighting for includes
    [ ] Includes (and therefore normals) need to have a flag that allows attribute children
    [ ] Error messages need to emit the script name as well as the line number
	[ ] Look at web-optimizator, css-tidy, etc. for lots of additional
	compression ideas.
  [ ] input-password --> input[type='password'] and other simple macro expansions
  [ ] Syntax highlighting error in vim when, for example,  button[type] as a selector ([type] shouldn't be a mixin)
  [ ] HSV -> normal rgb triplet conversion  - possibly even an alternat HSV syntax / token.  (e.g., "$HHSSVV")

-- ZWAPP --



-- SCRATCH --
zml 
    <- zml source
    <- dependency db for quick builds
    <- [special tag handlers] (how often? pretty concrete?)

zwapp
    [Server configs (dev,test,prod,etc.)] (pointed to in app or small .conf file)
      - Flags (watches, reload-monitors, reporting, etc.)
      - View source directory
      - Controller directory
      - Helper directory
      - Vhost info (hopefully mostly auto-populated) & hook-in options
      - DB config
      - Logdir
      - Cachedir
      - Compiled static files dir
      - Launch restrictions(? for example, make sure no other "prod" servers)

    *- deployment server
    *- admin server
    	*- app compiling
	*- auto app compiling
	*- auto self compiling
	*- secure command interface
	*- start/stop/reload
	*- hotswapping
    *- web server
        *- nginx<->misultin coupling
	*- self vhost management
	*- dev environment
	*- test environment
	*- production environment
    *- reporting
    *- test server
    	*- unit
	*- pre-deployment
	*- acceptance

Load tester

Analytics engine

Meta zwapp monitor / admin tool?

