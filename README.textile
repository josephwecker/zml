
Current work and issues can be found at
"PivotalTracker":https://www.pivotaltracker.com/projects/65667

Feel free to ping us if you want to be added to the pivotaltracker account.

h2. The Little ZMLer

ZML is a small markup language that uses indentation to represent
hierarchy of tags.

h3. tags

By default, ZML document translates into XML:

<pre><code>
:document
  :title My first ZML example
    has a pretty long title
  :table
    :tr
      :td cell 11
      :td cell 12
    :tr
      :td cell 21
      :td cell 22
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document>
  <title>My first ZML example has a pretty long title</title>
  <table>
    <tr>
      <td>cell 11</td>
      <td>cell 12</td>
    </tr>
    <tr>
      <td>cell 21</td>
      <td>cell 22</td>
    </tr>
  </table>
</document>
</code></pre>


h3. indentation matters

Note how it treats indentation to mix text and tags:

<pre><code>
:document
  :head First line of the HEAD tag.
    Second line of the HEAD - note the indentation.
  :body Obviously, that line belongs to BODY.
    This one is also part of the BODY.
  OOPS, this line is part of the DOCUMENT tag!
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document>
  <head>
    First line of the HEAD tag.
    Second line of the HEAD - note the indentation.
  </head>
  <body>
    Obviously, that line belongs to BODY.
    This one is also part of the BODY.
  </body>
  OOPS, this line is part of the DOCUMENT tag!
</document>
</code></pre>


h3. inline tags

Inline tags must have a closing semicolon in the same line:

<pre><code>
:document
  :title Here's a :strong big fat; title
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document>
  <title>Here's a <strong>big fat</strong> title</title>
</document>
</code></pre>


h3. comments

ZML supports single-line comments and special *comment tags:

<pre><code>
:document || Comment to the end of line
  *comment first line of the comment
    second line of the comment
  :body || Note this tag has an empty body!
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document><body/></document>
</code></pre>


h3. attributes

Syntax for attributes is:

<pre><code>
:document(author: Sergei Matusevich
          encoding: UTF-8 language: en-us)
  :title(class: header)
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document author="Sergei Matusevich" encoding="UTF-8" language="en-us">
  <title class="header"/>
</document>
</code></pre>

Note that because we use parenthesis, attributes can span multiple
lines. Multiline attributes must be indented, just like the body of
the tag.


h3. escaping special characters

To escape special characters, we can use backslash or any of the |""|,
|''|, or |``| quotes:

<pre><code>
:document(onload: |"onload();"|)
  :title \:tag escaping
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document onload="onload();">
  <title>:tag escaping</title>
</document>
</code></pre>


h3. multiline quotes

Note that |""| quotes can span multiple lines, but it still must be
indented relatively to the enclosing tag:


<pre><code>
:document
  :script(type: text/javascript) |"
    function onload() {
      alert("Hello there");
    } "|
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document>
  <script type="text/javascript">
    function onload() {
      alert("Hello there");
    } </script>
</document>
</code></pre>


h3. id and class attributes

ZML has special syntax for id and class attributes, common in (X)HTML:

<pre><code>
:document#sample-001
  :table#sample-table-id.bigtable-class
    :tr.bigtable-class.odd-row
      :td cell 11
      :td cell 12
    :tr.bigtable-class.even-row
      :td cell 21
      :td cell 22
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document id="sample-001">
  <table id="sample-table-id" class="bigtable-class">
    <tr class="odd-row bigtable-class">
      <td>cell 11</td>
      <td>cell 12</td>
    </tr>
    <tr class="even-row bigtable-class">
      <td>cell 21</td>
      <td>cell 22</td>
    </tr>
  </table>
</document>
</code></pre>

Note that each :tr tag has *two* classes that got pasted into a single
attribute value. Order of id and class attributes does not matter.


h3. div tags

If class or id (or both) are used, we can omit :tag name
alltogether. ZML uses div tag in such case:

<pre><code>
:document
  #header(onclick: |"alert('hello');"|) a header DIV
  #body.grid-3
    .title isn't that neat?
    More text for the body
  :div#footer a footer DIV
</code></pre>

<pre><code>
<?xml version="1.0"?>
<document>
  <div id="header" onclick="alert('hello');">a header DIV</div>
  <div id="body" class="grid-3">
    <div class="title">isn't that neat?</div>
    More text for the body
  </div>
  <div id="footer">a footer DIV</div>
</document>
</code></pre>

We can freely mix shortcuts for div, class, and id with the regular
ZML syntax.


h3. special tag - *html

ZML can be extended with special tags that hook up to the user-defined
code for custom syntax. Such tags start with the '*' character instead
of ':'. Most useful tag is *html. Compare this:

<pre><code>
:html or is it?
</code></pre>

<pre><code>
<?xml version="1.0"?>
<html>or is it?</html>
</code></pre>

With this:

<pre><code>
*html or is it?
</code></pre>

<pre><code>
<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="content-language" content="en-us" />
    <meta name="MSSmartTagsPreventParsing" content="true" />
  </head>
  <body>or is it?</body>
</html>
</code></pre>

That is, *html creates a lot of boilerplate HTML for us!


h3. *html special attributes

It also gives special treatment to many attributes, e.g.

<pre><code>
*html(title: That's a document title
      favicon: /img/favicon.ico
      encoding: koi8-r language: ru)
  Here goes the body
</code></pre>

<pre><code>
<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru" lang="ru">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=koi8-r" />
    <meta http-equiv="content-language" content="ru" />
    <meta name="MSSmartTagsPreventParsing" content="true" />
    <title>That's a document title</title>
    <link href="/img/favicon.ico" rel="icon" />
    <link href="/img/favicon.ico" rel="shortcut icon" />
  </head>
  <body>Here goes the body</body>
</html>
</code></pre>

Note the link and title tags, as well as the change in meta http-equiv
parameters.


h3. *html special attributes - complete list

Here's the full list of special attributes that *html currently
supports:

h4. document type

* type: HTML type. Can be one of:

| html2 |
| html3 |
| strict |
| frameset |
| xhtml_strict |
| xhtml_frameset |
| transitional |
| xhtml_transitional |

This attribute selects what HTML template to use, e.g.

<pre><code>
*html(type:html2) test
</code></pre>

<pre><code>
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="Content-Language" content="en-us">
    <meta name="MSSmartTagsPreventParsing" content="TRUE">
  </head>
  <body>test</body>
</html>
</code></pre>

<pre><code>
*html(type:xhtml_frameset) test
</code></pre>

<pre><code>
<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="content-language" content="en-us" />
    <meta name="MSSmartTagsPreventParsing" content="true" />
  </head>
  <body>test</body>
</html>
</code></pre>

h4. encoding and language

* encoding: document encoding. UTF-8 by default.

* language: content-language part of the http-equiv. Also sets the
lang and xml:lang attributes of the html tag, if html type requires
so. Default is en-us.

h4. other special attributes for *html

* nosmarttag: true or false. Controls MSSmartTagsPreventParsing.

* stylelibs: Names of ZSS libraries to include

* remove_unused_css: false (default) or true. Turns on CSS optimization.

* description
* keywords
* copyright
* title
* favicon

Various shortcuts. The following example uses them all:

<pre><code>
*html(description: document description
      keywords: zml zss markup erlang
      copyright: Joseph Wecker
      title: page title
      favicon: /img/favicon.ico)
  test
</code></pre>

<pre><code>
<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="content-language" content="en-us" />
    <meta name="description" content="document description" />
    <meta name="keywords" content="zml zss markup erlang" />
    <meta name="copyright" content="Copyright (c) Joseph Wecker" />
    <meta name="MSSmartTagsPreventParsing" content="true" />
    <title>page title</title>
    <link href="/img/favicon.ico" rel="icon" />
    <link href="/img/favicon.ico" rel="shortcut icon" />
  </head>
  <body>test</body>
</html>
</code></pre>


h3. *table markup

Special tag *table implements a simple markup language for tables. It
looks like this:

<pre><code>
*table
  | a | b |
  | c | d |
</code></pre>

This code translates into:

<pre><code>
<?xml version="1.0"?>
<table>
  <tr>
    <td>a</td>
    <td>b</td>
  </tr>
  <tr>
    <td>c</td>
    <td>d</td>
  </tr>
</table>
</code></pre>

Each row of the table must begin and end with the '|'
character. Spaces are treated as-is; note that "||" (with no spaces)
is treated as a comment:

<pre><code>
*table | a|b |  || comment!
</code></pre>

results in

<pre><code>
<?xml version="1.0"?>
<table><tr><td> a</td><td>b </td></tr></table>
</code></pre>

Note that it is OK to start table immediately after the *table tag, on
the same line. Comments and quoted strings are also supported.

h4. inline tags inside *table

It is perfectly fine to have other tags inside the *table markup. '|'
characters inside such tags are just regular characters, and are not
interpreted as column separators, e.g.

<pre><code>
*table | :strong some | text; |
</code></pre>

translates into:

<pre><code>
<?xml version="1.0"?>
<table>
  <tr>
    <td>
      <strong>some | text</strong>
    </td>
  </tr>
</table>
</code></pre>

h4. tr and td attributes

To specify attributes for tr and td tags, prefix them with "tr_" and
"td_", respectively, and define them in the *table tag:

<pre><code>
*table#bigtable(tr_class: row td_class: cell border: 0) | a | b |
</code></pre>

translates into:

<pre><code>
<?xml version="1.0"?>
<table id="bigtable" border="0">
  <tr class="row">
    <td class="cell">a</td>
    <td class="cell">b</td>
  </tr>
</table>
</code></pre>

h3. Templating

h4. Variables

Syntax for variables is:

<pre><code>
${variable}
</code></pre>

To refer nested data sets, separate identifiers with dots:

<pre><code>
${data_set.nestedDataSet.var}
</code></pre>

Variables can be used in side the :tag body or in attribute
values. Behavior of the *special tags depends on teh implementation,
e.g. *comment and *verbatim treat variables as any other text.

h4. Repeated blocks

To iterate over a data set, use the *with special tag, e.g.

<pre><code>
:table
  *with(id: data_set)
    :tr :td ${user_name}; :td ${user_address};
</code></pre>

Here :tr block will be replicated as many times as there are records
in the given data_set.

Data set ID is specified in the *with id attribute. We can also write
*with#data_set to the same effect.

